import numpy as np
import pandas as pd
import os
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
from sklearn import metrics
import seaborn as seabornInstance 
from statsmodels.tsa.api import VAR
from statsmodels.tsa.stattools import adfuller
from statsmodels.tools.eval_measures import rmse, aic

url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
df1 = pd.read_csv(url)
use_states = ['Texas','Illinois','California','Georgia','Newyork', 'Kentucky', 'Ohio', 'Alabama', 'Pennsylvania', 'Missouri', 'South Carolina']
df1 = df1.drop(columns = "fips")
df1 = df1[df1.state.isin(use_states)]

def stateDF(stateName):
  df2 = df1[df1['state']==stateName].groupby('date').sum()
  #df_georgia = df1[df1['state']=='Georgia'].groupby('date').sum()
  #df_kentucky = df1[df1['state']=='Kentucky'].groupby('date').sum()
  return df2

def changeDeaths(stateName):
  df2 = stateDF(stateName)
  df2.drop(df2.head(80).index, inplace=True)
  df2['one week'] = df2['deaths'].shift(-7)
  df2.dropna()
  model = LinearRegression()
  X_data = df2['cases'].to_numpy()
  Y_data = df2['deaths'].to_numpy()
  df3 = df2
  df3 = df3.shift(-1)
  df3 = df3 - df2
  X1_data = df3['cases'].to_numpy()
  Y1_data = df3['deaths'].to_numpy()
  Y1_data = Y1_data[:-1]
  X1_data = X1_data[:-1]
  seq_length = 14
  num_examples1 = X1_data.shape[0] - seq_length
  num_example = X1_data.shape[0] - 2*seq_length
  X1_res = np.zeros((num_example, 1))
  Y1_res = np.zeros((num_example, 1))
  X1_test = np.zeros((seq_length, 1))
  Y1_test = np.zeros((seq_length, 1))
  for i in range(num_example):
    X1_res[i,:seq_length] = X1_data[i : i+1]
    Y1_res[i, :seq_length] = Y1_data[i : i+1]
  for j in range(seq_length):
    X1_test[j, :] = X1_data[j+num_examples1-seq_length : j+num_examples1-seq_length+1]
    Y1_test[j, :] = Y1_data[j+num_examples1-seq_length : j+num_examples1-seq_length+1]
  model.fit(X1_res, Y1_res)
  y1_pred = model.predict(X1_test)
  return y1_pred
changeDeaths('California')


def getDataForScenarios(state_name):
 df2 = stateDF(state_name)
 X_data = df2['cases'].to_numpy()
 Y_data = df2['deaths'].to_numpy()
 seq_length = 14
 y1_pred = changeDeaths(state_name)
 yarray = np.zeros((y1_pred.shape[0]))
 ytotal = np.zeros((y1_pred.shape[0]))
 ytotal1 = np.zeros((y1_pred.shape[0]))
 ytotal0 = np.zeros((y1_pred.shape[0]))
 datel = pd.date_range(start="2020-06-10",end="2020-06-23")
 #print(datel)
 temp = Y_data[-seq_length]
 temp1 = temp
 temp0 = temp
 for i in range(y1_pred.shape[0]):
    yarray[i] = i
    ytotal[i] = temp + y1_pred[i]
    ytotal1[i] = temp1 + y1_pred[i]*0.35
    temp = ytotal[i]
    temp1 = ytotal1[i]
    ytotal0[i] = temp0 + y1_pred[i]*1.3
    temp0 = ytotal0[i]

 x1 = plt.plot(datel, ytotal, color = 'r', label = 'Normal' )
 x2 = plt.plot(datel, ytotal1, color = 'b', label = 'MoreMasks')
 x3 = plt.plot(datel, ytotal0, color = 'g', label = 'LessMasks')
 plt.tick_params(axis='x', which='major', labelsize=8)
 plt.xlabel('Date')
 plt.ylabel('Deaths')
 plt.legend()
 #plt.legend((x1, x2, x3), ('label1', 'label2', 'label3'))
getDataForScenarios('California')


